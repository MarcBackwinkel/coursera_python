Some Definitions:

Scale           Being able to scale what we do means that we can keep achieving larger impacts with the same amount of effort
                A scalable system is a flexible one!

                To find out if a system is scalable, you could ask following questions:
                - Will adding more servers increase the capacity of the service?
                - How are new servers prepared, installed, and configured? 
                - How quickly can you set up new computers to get them ready to be used? 
                - Could you deploy a hundred servers with the same IT team that you have today? 
                - Or would you need to hire more people to get it done faster? 
                - Would all the deployed servers be configured exactly the same way?

Automation      An essential tool for keeping up with the infrastructure needs of a growing business.

Configuration Management (some Tools: Puppet, Chef, Ansible, CFEngine)
                - define configuration rules
                - let automation apply those rules on all machines (also called "nodes")

                -> Another important aspect of configuration management is that operations should be idempotent. 
                   In this context, an idempotent action can be performed over and over again without changing the system after the first time 
                   the action was performed, and with no unintended side effects.

                - Test and repair paradigm: first test if an action is needed on client and - only then - perform action (repair)
                - Puppet is stateless: Each Puppet run is independent of the previous one, and the next one. Every run just depends on currently colledted facts.

Infrastructure as Code 
                When all of the configuration necessary to deploy and manage a node in the infrastructure is stored in version control.
                Managing your Infrastructure as Code means that your fleet of nodes are 
                    - consistent,
                    - versioned, 
                    - reliable and 
                    - repeatable. 
                Instead of being seen as precious or unique, machines are treated as replaceable resources that can be deployed on-demand through the automation. 
                Any infrastructure that claims to be scalable must be able to handle the capacity requirements of growth.

====================================================================================================================================================================================
Puppet

Managing the configurations of computers and a fleet of machines.

        Puppet master (service)
           ^            |
    sends  |            |   apply
    Facts  |            |   Rules
           |           \ /
        Puppet agent (client)
 (uses "Providers" to apply rules to local system)

Facts               Variables that represent characteristics of the system
Providers           Puppet assigns providers according to predefined rules for the resource type and data collected from the system such as the family of the underlying operating system.
                    Providers may be package managers for installation of software, e.g. apt, yum

Resources           The basic unit for modeling that we want to manage (e.g. 'package' or 'file' keyword is a resource)
                    The most basic unit in Puppet is a resource, such as user, group, file, service or package.

Puppet Syntax:      class class_name {
                        resource { 'title_of_resource': 
                            attribute1 => set_value1,
                            attribute2 => set_value2,
                            ...
                        }
                    }

Puppet uses a declarative language because we declare the state that we want to achieve rather than the steps to get there.
(vs. Python, etc. being procedural languages.)

Classes:            group related resources
                    more easily understand the configuration and make changes in the future

Resources:
    exec                     # runs a specific command                  <-- be careful as this resource might not be idempotent
    file
    package
    service


Attributes ==> values:
    content => some_value               # content to be in e.g. a file
    ensure => absent                    # a resource will be removed
    command => command                  # command to be executed in an exec resource, e.g. 'mv file1 Desktop/file1', combine with attribute "onlyif" to make it idempotent
    ensure => directory                 # this resource must be available on the client and being a directory
    ensure => file                      # this resource must be available on the client and being a file
    ensure => installed
    ensure => latest                    # install latest version
    ensure => purged
    ensure => running                   # start a service if not already running
    mode => '0644'                      # set special rights, rights for owner, group, others (rwx)
    onlyif => command                   # performs command only if it is possible  <-- this is idempotent and will not finish with an error
    replace => true                     # an existing file will be overwritten


Puppet can provide, install and run a service:
class ntp {                     # ntp: Network Time Protocol: method computers uses to synchronize clocks
    package {'ntp':
        ensure => latest,
    }
    file {'etc/ntp.conf':
        source => 'link',
        replace => true,
    }
    service {'ntp':
        enable: true,
        ensure => running,
    }


}


------------------------------------------------------------------------------------------------------------------------------------------------
Puppet - Domain Specific Language (DSL)

Python, Java, Ruby, Go, .... are General purpose languages
vs.
Domain Specific Languages       A programming language that is more limited in scope

DSL for Puppet defines
    - when
    - how 
      to apply configuration management rules to our devices

    - Variables                 always written as $var
    - Conditional Statements
    - Functions

    - Facts                     Variables that represent characteristics of the system 
                                adress facts in DSL with $facts['fact_name']
                                facts are hashes (equivalent to dictionaries in Python)
                                A fact is a hash that stores information about the details of a particular system.

Facts:
    $fact['is_virtual']         # checks if the system is a virtual machine


------------------------------------------------------------------------------------------------------------------------------------------------
local usage of puppet

Installation:       sudo apt install puppet-master
Puppet Files:       called "Manifest", always ends on .pp

bash:> vim tools.pp

package {'htop':            # this package ensures that the htop command is present on the computer
    ensure => present,
}

bash:> sudo puppet apply -v tools.pp           # -v: verbose output

Catalog                The list of rules that are generated for one specific computer once the server has evaluated 
                            all variables, conditionals, and functions

Resource Relationship:
We write resource types in lowercase when declaring them, but capitalize them when referring to them from another resource's attributes.

class ntp {
    package {'ntp':
        ensure => latest,
    }
    file {'/etc/ntp.conf':
        ...
        require => Package['ntp'],             # requires previoulsy defined package
        notify => Service['ntp],               # all relationships like Package and Service are written with a first capital letter
                                               #   while the relevant resources (package, file, service) are written with a first lower letter
    }
    service {'ntp':
        ...
        require => File['/etc/ntp.conf'],      # requires previoulsy defined file
        ...
    }
}

include ntp                                    # tell puppet that the rules of the class shall be applied



























