# Before Version Control
diff -u file1 file2 > changes.diff
patch file1 < changes.diff


---------------------------------------------------------------------------------------------------------------------------------
git

git directory  - contains the history of all the files and changes
working tree   - contains current state of the project and all current versions of the files
staging area   - all changes that go into next commit

HEAD           - shows currently checked-out snapshot (like a bookmark; pointer to the current branch)

tracked / untracked files   - tracked files are part of the snapshots (git commit) while untracked aren't (yet)
                            - git add: adds file to tracked files
each file can be in one state: 
    - Modified    (changes - i.e. modifying, adding, deleting lines - made to file that has not been committed yet)
    - Staged      (files are ready for commitment; all staged files will be part of next commit) via git add
    - Commmitted  (changes are stored in VCS)
    
git Workflow
    git init/clone - git add file - git commit - edit file - git add file - git commit
file is                 tracked     committed    modified       staged      committed
             OR
    git init/clone - git add file - git commit - edit file -                git commit -a
file is                 tracked     committed    modified                  staged & committed

commit message: 1 line < 51 characters - 1 blank line - detailed description of changes in several lines but each line < 72 characters

git config --global user.name 'Marc Backwinkel'
git config --global user.email 'marc.backwinkel@gmail.com'
        git config -l         # list actual config

git init                             -> creates .git (git directory), initializes git repository
  or
git clone                            -> copies .git locally (git directory)
git add file_to_add_to_project.py    # adds file to project and to staging area
git status                           # show outstanding changes
git commit                           # save changes; git creates snapshots of project on each commit
         git commit -a               # shortcut to stage any changes to TRACKED files and commit them in one step
         git commit -m 'commit message'     # just for short commit messages
git log                              # show all commit messages
git diff file                        # shows differences between file.last_snapshot file.actual_version
